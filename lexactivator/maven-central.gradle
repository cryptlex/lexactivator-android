apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'com.android.library'

task androidJavadocs(type: Javadoc) {
	source = android.sourceSets.main.java.srcDirs
	classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
	android.libraryVariants.all { variant ->
		if (variant.name == 'release') {
			owner.classpath += variant.javaCompileProvider.get().classpath
		}
	}
	exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
	archiveClassifier.set('javadoc')
	from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
	archiveClassifier.set('sources')
	from android.sourceSets.main.java.srcDirs
}

project.afterEvaluate{
	publishing {
		publications {
			release( MavenPublication ) {
				
				groupId PUBLISH_GROUP_ID
				artifactId PUBLISH_ARTIFACT_ID
				version PUBLISH_VERSION
				
				artifact bundleReleaseAar
				artifact androidJavadocsJar
				artifact androidSourcesJar
				
				pom {
					name = 'LexActivator'
					description = 'LexActivator wrapper for Android (licensing library).'
					url = 'https://github.com/cryptlex/lexactivator-android'
					licenses {
						license {
							name = 'MIT License'
							url = 'http://www.opensource.org/licenses/mit-license.php'
						}
					}
					organization {
						name = 'Cryptlex, LLC'
						url = 'https://cryptlex.com'
					}
					developers {
						developer {
							name = 'Cryptlex Team'
							email = 'support@cryptlex.com'
							organization = 'Cryptlex, LLC.'
							organizationUrl = 'https://cryptlex.com'
						}
					}
					scm {
						connection = 'scm:git:https://github.com/cryptlex/lexactivator-android.git'
						developerConnection = 'scm:git:ssh://github.com/cryptlex/lexactivator-android.git'
						url = 'https://github.com/cryptlex/lexactivator-android'
					}
					withXml {
						def dependenciesNode = asNode().appendNode('dependencies')

						project.configurations.implementation.allDependencies.each {
							def dependencyNode = dependenciesNode.appendNode('dependency')
							dependencyNode.appendNode('groupId', it.group)
							dependencyNode.appendNode('artifactId', it.name)
							dependencyNode.appendNode('version', it.version)
						}
					}
			    }
		    }
			
			debug( MavenPublication ) {
				
				groupId PUBLISH_GROUP_ID
				artifactId PUBLISH_ARTIFACT_ID
				version PUBLISH_VERSION
				
				artifact bundleReleaseAar
				artifact androidJavadocsJar
				artifact androidSourcesJar
				
				pom {
					name = 'LexActivator'
					description = 'LexActivator wrapper for Android (licensing library).'
					url = 'https://github.com/cryptlex/lexactivator-android'
					licenses {
						license {
							name = 'MIT License'
							url = 'http://www.opensource.org/licenses/mit-license.php'
						}
					}
					organization {
						name = 'Cryptlex, LLC'
						url = 'https://cryptlex.com'
					}
					developers {
						developer {
							name = 'Cryptlex Team'
							email = 'support@cryptlex.com'
							organization = 'Cryptlex, LLC.'
							organizationUrl = 'https://cryptlex.com'
						}
					}
					scm {
						connection = 'scm:git:https://github.com/cryptlex/lexactivator-android.git'
						developerConnection = 'scm:git:ssh://github.com/cryptlex/lexactivator-android.git'
						url = 'https://github.com/cryptlex/lexactivator-android'
					}
					withXml {
						def dependenciesNode = asNode().appendNode('dependencies')

						project.configurations.implementation.allDependencies.each {
							def dependencyNode = dependenciesNode.appendNode('dependency')
							dependencyNode.appendNode('groupId', it.group)
							dependencyNode.appendNode('artifactId', it.name)
							dependencyNode.appendNode('version', it.version)
						}
					}
			    }
		    }
	    }
	}

	signing {
			def signingKey = findProperty("signingKey")
			def signingPassword = findProperty("signingPassword")
			useInMemoryPgpKeys(signingKey, signingPassword)
			sign publishing.publications.release
	}
}
